module.exports = function (m) {  
    m.users.users.hasOne(              m.users.ranks,         {foreignKey: 'rank_id',       sourceKey: 'rank_id',       constraints: false});
    m.users.users.hasOne(              m.users.statuses,      {foreignKey: 'status_id',     sourceKey: 'status_id',     constraints: false});
    m.users.users.hasMany(             m.users.permissions,   {foreignKey: 'user_id',       sourceKey: 'user_id'});
    m.users.users.hasMany(             m.stores.permissions,  {foreignKey: 'user_id',       sourceKey: 'user_id'});
    m.users.users.hasMany(             m.canteen.permissions, {foreignKey: 'user_id',       sourceKey: 'user_id'});
    m.users.users.hasMany(             m.stores.orders,       {foreignKey: 'ordered_for',   targetKey: 'user_id'});
    m.users.users.hasMany(             m.stores.requests,     {foreignKey: 'requested_for', targetKey: 'user_id'});
    m.users.users.hasMany(             m.stores.issues,       {foreignKey: 'issued_to',     targetKey: 'user_id'});
    m.stores.adjusts.hasOne(           m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.accounts.hasOne(          m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.issues.hasOne(            m.users.users,         {foreignKey: 'user_id',       sourceKey: 'issued_to',     constraints: false, as: 'user_to'});
    m.stores.issues.hasOne(            m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false, as: 'user_by'});
    m.stores.issue_lines.hasOne(       m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.issue_line_returns.hasOne(m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.notes.hasOne(             m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.orders.hasOne(            m.users.users,         {foreignKey: 'user_id',       sourceKey: 'ordered_for',   constraints: false, as: 'user_for'});
    m.stores.orders.hasOne(            m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false, as: 'user_by'});
    m.stores.order_lines.hasOne(       m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.order_line_actions.hasOne(m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.requests.hasOne(          m.users.users,         {foreignKey: 'user_id',       sourceKey: 'requested_for', constraints: false, as: 'user_for'});
    m.stores.requests.hasOne(          m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false, as: 'user_by'});
    m.stores.request_lines.hasOne(     m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false, as: 'user_add'});
    m.stores.request_lines.hasOne(     m.users.users,         {foreignKey: 'user_id',       sourceKey: 'approved_by',   constraints: false, as: 'user_approve'});
    m.stores.receipts.hasOne(          m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.receipt_lines.hasOne(     m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.demands.hasOne(           m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.stores.demand_lines.hasOne(      m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.canteen.sessions.hasOne(         m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id_open',  constraints: false, as: 'user_open'});
    m.canteen.sessions.hasOne(         m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id_close', constraints: false, as: 'user_close'});
    m.canteen.sales.hasOne(            m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.canteen.receipts.hasOne(         m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
    m.canteen.writeoffs.hasOne(        m.users.users,         {foreignKey: 'user_id',       sourceKey: 'user_id',       constraints: false});
};